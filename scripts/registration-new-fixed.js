// Registration page functionality - FIXED VERSION (RU)
(function() {
  const isEnglish = (document.documentElement.getAttribute('lang') || '').toLowerCase() === 'en';

  // Default countries data (fallback)
  const defaultCountries = [
    { id: 'cyprus', name: '–ö–∏–ø—Ä', flag: 'üá®üáæ', region: 'europe', time: '7-10 –¥–Ω–µ–π', price: 2500, priceText: '$2,500', features: ['EU –∫–æ–º–ø–∞–Ω–∏—è', '–ù–∏–∑–∫–∏–µ –Ω–∞–ª–æ–≥–∏', '–ü—Ä–µ—Å—Ç–∏–∂'] },
    { id: 'uk', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', flag: 'üá¨üáß', region: 'europe', time: '3-5 –¥–Ω–µ–π', price: 1500, priceText: '$1,500', features: ['–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ú–∏—Ä–æ–≤–æ–π –ø—Ä–µ—Å—Ç–∏–∂', '–ë–∞–Ω–∫–∏'] },
    { id: 'estonia', name: '–≠—Å—Ç–æ–Ω–∏—è', flag: 'üá™üá™', region: 'europe', time: '1-3 –¥–Ω—è', price: 1200, priceText: '$1,200', features: ['E-Residency', '–û–Ω–ª–∞–π–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'EU –∫–æ–º–ø–∞–Ω–∏—è'] },
    { id: 'singapore', name: '–°–∏–Ω–≥–∞–ø—É—Ä', flag: 'üá∏üá¨', region: 'asia', time: '5-7 –¥–Ω–µ–π', price: 3000, priceText: '$3,000', features: ['–ê–∑–∏–∞—Ç—Å–∫–∏–π —Ö–∞–±', '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–ë–∞–Ω–∫–∏'] },
    { id: 'hongkong', name: '–ì–æ–Ω–∫–æ–Ω–≥', flag: 'üá≠üá∞', region: 'asia', time: '7-14 –¥–Ω–µ–π', price: 3500, priceText: '$3,500', features: ['–î–æ—Å—Ç—É–ø –∫ –ö–∏—Ç–∞—é', '–ù–∏–∑–∫–∏–µ –Ω–∞–ª–æ–≥–∏', '–ü—Ä–µ—Å—Ç–∏–∂'] },
    { id: 'uae', name: '–û–ê–≠', flag: 'üá¶üá™', region: 'asia', time: '7-10 –¥–Ω–µ–π', price: 4000, priceText: '$4,000', features: ['0% –Ω–∞–ª–æ–≥–æ–≤', '–†–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∞—è –≤–∏–∑–∞', '–ë–∞–Ω–∫–∏'] }
  ];

  // Load countries from localStorage (RU), otherwise fallback
  let countries = [];
  try {
    const stored = localStorage.getItem('registrationCountries');
    if (stored) {
      const parsed = JSON.parse(stored);
      if (Array.isArray(parsed) && parsed.length > 0 && parsed[0].name) {
        countries = parsed;
      } else {
        countries = defaultCountries;
      }
    } else {
      countries = defaultCountries;
    }
  } catch (e) {
    console.warn('registrationCountries corrupted, using defaults', e);
    countries = defaultCountries;
  }

  // DOM elements
  const countriesGrid = document.getElementById('countries-grid');
  const searchInput = document.getElementById('country-search');
  const regionFilter = document.getElementById('region-filter');
  const resetBtn = document.getElementById('reset-filters');
  const openPickerBtn = document.getElementById('open-country-picker');
  const pickerPanel = document.getElementById('country-picker-panel');

  // Render countries
  function renderCountries(data = countries) {
    if (!countriesGrid) {
      return;
    }

    if (!data || !Array.isArray(data) || data.length === 0) {
      countriesGrid.innerHTML = '<p style="text-align:center;color:#8899a6;padding:40px;">–ù–µ—Ç —Å—Ç—Ä–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–∞–Ω—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.</p>';
      return;
    }

    const valid = data.filter(c => c && c.name);
    countriesGrid.innerHTML = valid.map((country, index) => {
      const priceText = country.priceText || (country.price ? `$${country.price}` : '–ü–æ –∑–∞–ø—Ä–æ—Å—É');
      const hasArticle = !!country.articleUrl;
      return `
      <div class="country-card" data-country-id="${country.id || `country-${index}`}" style="animation-delay: ${index * 0.1}s">
        <div class="country-flag">${country.flag || 'üè≥Ô∏è'}</div>
        <h3 class="country-name">${country.name}</h3>
        <div class="country-info">
          <div class="country-info-item">
            <span class="country-info-label">–°—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
            <span class="country-info-value">${country.time || '‚Äî'}</span>
          </div>
          ${country.features && country.features.length ? `
            <div class="country-info-item">
              <span class="country-info-label">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</span>
            </div>
            <ul style="margin:8px 0 0 0;padding-left:20px;color:rgba(255,255,255,0.8);font-size:14px;">
              ${country.features.map(f => `<li>${f}</li>`).join('')}
            </ul>
          ` : ''}
        </div>
        <div class="country-price">–æ—Ç ${priceText}</div>
        <div style="display:flex;gap:10px;flex-wrap:wrap;">
          <button class="country-cta" onclick="openRegistrationModal('${country.id || `country-${index}`}')">–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</button>
          ${hasArticle ? `<button class=\"country-cta\" style=\"background:#2c3e50;\" onclick=\"openCountryArticle('${(country.articleUrl || '').replace(/'/g, '')}', '${(country.name || '').replace(/'/g, '')}')\">–û—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç—å—é</button>` : ''}
        </div>
      </div>`;
    }).join('');
  }

  // Filter
  function filterCountries() {
    let filtered = [...countries];
    const term = (searchInput?.value || '').toLowerCase();
    if (term) filtered = filtered.filter(c => (c.name || '').toLowerCase().includes(term));
    const region = regionFilter?.value || '';
    if (region) filtered = filtered.filter(c => c.region === region);
    renderCountries(filtered);
  }

  searchInput?.addEventListener('input', filterCountries);
  regionFilter?.addEventListener('change', filterCountries);
  resetBtn?.addEventListener('click', () => {
    if (searchInput) searchInput.value = '';
    if (regionFilter) regionFilter.value = '';
    renderCountries();
  });

  // Fullscreen Country Picker
  const pickerClose = document.getElementById('picker-close');
  const pickerSearch = document.getElementById('picker-search');
  const pickerRegion = document.getElementById('picker-region');
  const pickerList = document.getElementById('picker-list');

  function openPicker() {
    if (!pickerPanel) return;
    buildPickerList();
    pickerPanel.style.display = 'block';
    pickerSearch?.focus();
  }
  function closePicker() {
    if (!pickerPanel) return;
    pickerPanel.style.display = 'none';
  }
  function buildPickerList() {
    if (!pickerList) return;
    const term = (pickerSearch?.value || '').toLowerCase();
    const region = pickerRegion?.value || '';
    let list = [...countries].filter(c => c && c.name);
    if (region) list = list.filter(c => c.region === region);
    if (term) list = list.filter(c => (c.name || '').toLowerCase().includes(term));
    // group by region then sort by name
    const regionOrder = ['europe','asia','america','oceania','africa','offshore'];
    const byRegion = region ? regionOrder : regionOrder;
    const groups = {};
    list.forEach(c => {
      const key = c.region || 'other';
      if (!groups[key]) groups[key] = [];
      groups[key].push(c);
    });
    const parts = [];
    byRegion.forEach(key => {
      const items = (groups[key] || []).sort((a,b) => a.name.localeCompare(b.name, 'ru'));
      if (items.length) {
        parts.push(`<div style="padding:8px 0;color:#3498db;font-weight:600;font-size:15px;border-bottom:1px solid #2c3e50;">${regionLabel(key)}</div>`);
        parts.push('<div style="display:grid;grid-template-columns:repeat(auto-fill,minmax(180px,1fr));gap:8px;padding:8px 0;">' +
          items.map(c => `<button class="btn btn-sm" style="justify-content:flex-start;font-size:13px;padding:10px 14px;" data-pick="${c.id}">${c.flag || 'üè≥Ô∏è'} ${c.name}</button>`).join('') +
        '</div>');
      }
    });
    pickerList.innerHTML = parts.join('') || '<p style="color:#8899a6;text-align:center;padding:20px;">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>';
    pickerList.querySelectorAll('[data-pick]').forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-pick');
        closePicker();
        if (typeof window.openRegistrationModal === 'function') {
          window.openRegistrationModal(id);
        }
      });
    });
  }
  function regionLabel(r){
    switch(r){
      case 'europe': return '–ï–≤—Ä–æ–ø–∞';
      case 'asia': return '–ê–∑–∏—è';
      case 'america': return '–ê–º–µ—Ä–∏–∫–∞';
      case 'oceania': return '–ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –û–∫–µ–∞–Ω–∏—è';
      case 'africa': return '–ê—Ñ—Ä–∏–∫–∞';
      case 'offshore': return '–û—Ñ—Ñ—à–æ—Ä—ã';
      default: return '–ü—Ä–æ—á–µ–µ';
    }
  }
  openPickerBtn?.addEventListener('click', openPicker);
  pickerClose?.addEventListener('click', closePicker);
  pickerSearch?.addEventListener('input', buildPickerList);
  pickerRegion?.addEventListener('change', buildPickerList);

  renderCountries();
  // Hydrate from server so all visitors see the same data
  (async function hydrateFromServer() {
    try {
      const res = await fetch('/api/save-data?lang=ru', { cache: 'no-store' });
      if (!res.ok) return;
      const data = await res.json();
      if (data && Array.isArray(data.registrationCountries)) {
        const serverCountries = (data.registrationCountries || []).filter(c => c && c.name);
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (serverCountries.length && serverCountries.length >= (Array.isArray(countries) ? countries.length : 0)) {
          countries = serverCountries;
          try { localStorage.setItem('registrationCountries', JSON.stringify(countries)); } catch(_) {}
          renderCountries();
        }
      }
    } catch (e) {}
  })();

  // Modal functionality
  const modal = document.getElementById('registration-modal');
  const modalClose = document.getElementById('modal-close');
  const modalFlag = document.getElementById('modal-flag');
  const modalTitle = document.getElementById('modal-title');
  const modalSubtitle = document.getElementById('modal-subtitle');
  const countryInput = document.getElementById('country-input');
  const formSubject = document.getElementById('form-subject');
  const registrationForm = document.getElementById('registration-form');
  const formSuccess = document.getElementById('form-success');

  window.openRegistrationModal = (countryId) => {
    const country = countries.find(c => (c.id || `country-${countries.indexOf(c)}`) === countryId);
    if (!country || !modal) return;
    modalFlag.textContent = country.flag || 'üè≥Ô∏è';
    modalTitle.textContent = `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –≤ ${country.name}`;
    modalSubtitle.textContent = `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ ${country.name}`;
    formSubject.value = `–ó–∞–∫–∞–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ ${country.name}`;
    countryInput.value = country.name;
    modal.classList.add('active');
  };

  modalClose?.addEventListener('click', () => modal.classList.remove('active'));
  modal?.addEventListener('click', (e) => { if (e.target === modal) modal.classList.remove('active'); });

  registrationForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(registrationForm);
    const data = {
      service: 'registration',
      country: formData.get('country'),
      name: formData.get('name'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      message: formData.get('message')
    };
    try {
      await sendToTelegram(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${data.country}\n–ò–º—è: ${data.name}\nEmail: ${data.email}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}${data.message ? `\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}` : ''}`);
      registrationForm.style.display = 'none';
      formSuccess.style.display = 'block';
      formSuccess.innerHTML = '<p>‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</p>';
      setTimeout(() => {
        modal.classList.remove('active');
        registrationForm.style.display = 'block';
        formSuccess.style.display = 'none';
        registrationForm.reset();
      }, 3000);
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  });

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ç—å–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è URL –∏ –∑–∞–ø–∞—Å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —á–µ—Ä–µ–∑ viewer
  function slugify(text) {
    const map = {
      '–∞':'a','–±':'b','–≤':'v','–≥':'g','–¥':'d','–µ':'e','—ë':'e','–∂':'zh','–∑':'z','–∏':'i','–π':'y','–∫':'k','–ª':'l','–º':'m','–Ω':'n','–æ':'o','–ø':'p','—Ä':'r','—Å':'s','—Ç':'t','—É':'u','—Ñ':'f','—Ö':'h','—Ü':'c','—á':'ch','—à':'sh','—â':'sch','—ä':'','—ã':'y','—å':'','—ç':'e','—é':'yu','—è':'ya',
      '–ê':'a','–ë':'b','–í':'v','–ì':'g','–î':'d','–ï':'e','–Å':'e','–ñ':'zh','–ó':'z','–ò':'i','–ô':'y','–ö':'k','–õ':'l','–ú':'m','–ù':'n','–û':'o','–ü':'p','–†':'r','–°':'s','–¢':'t','–£':'u','–§':'f','–•':'h','–¶':'c','–ß':'ch','–®':'sh','–©':'sch','–™':'','–´':'y','–¨':'','–≠':'e','–Æ':'yu','–Ø':'ya'
    };
    return String(text)
      .split('')
      .map(ch => map[ch] !== undefined ? map[ch] : ch)
      .join('')
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .trim()
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-');
  }

  async function urlExists(url) {
    try {
      const res = await fetch(url, { method: 'HEAD' });
      return res.ok;
    } catch (e) {
      return false;
    }
  }

  window.openCountryArticle = async (rawUrl, countryName) => {
    const url = (rawUrl || '').trim();
    if (url) {
      const ok = await urlExists(url.endsWith('.html') || url.includes('?') ? url : `${url}.html`);
      if (ok) {
        window.open(url.endsWith('.html') || url.includes('?') ? url : `${url}.html`, '_blank');
        return;
      }
    }
    const slug = slugify(countryName || 'article');
    const viewer = '/pages/articles/view.html?slug=' + encodeURIComponent(slug);
    window.open(viewer, '_blank');
  };
})();

