// Registration page functionality - FIXED VERSION
(function() {
  const isEnglish = (document.documentElement.getAttribute('lang') || '').toLowerCase() === 'en';
  
  // Default countries data
  const defaultCountries = [
    { 
      id: 'cyprus',
      name: '–ö–∏–ø—Ä',
      flag: 'üá®üáæ',
      region: 'europe',
      time: '7-10 –¥–Ω–µ–π',
      price: 2500,
      priceText: '$2,500',
      features: ['EU –∫–æ–º–ø–∞–Ω–∏—è', '–ù–∏–∑–∫–∏–µ –Ω–∞–ª–æ–≥–∏', '–ü—Ä–µ—Å—Ç–∏–∂']
    },
    { 
      id: 'uk',
      name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
      flag: 'üá¨üáß',
      region: 'europe',
      time: '3-5 –¥–Ω–µ–π',
      price: 1500,
      priceText: '$1,500',
      features: ['–ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ú–∏—Ä–æ–≤–æ–π –ø—Ä–µ—Å—Ç–∏–∂', '–ë–∞–Ω–∫–∏']
    },
    { 
      id: 'estonia',
      name: '–≠—Å—Ç–æ–Ω–∏—è',
      flag: 'üá™üá™',
      region: 'europe',
      time: '1-3 –¥–Ω—è',
      price: 1200,
      priceText: '$1,200',
      features: ['E-Residency', '–û–Ω–ª–∞–π–Ω —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'EU –∫–æ–º–ø–∞–Ω–∏—è']
    },
    { 
      id: 'singapore',
      name: '–°–∏–Ω–≥–∞–ø—É—Ä',
      flag: 'üá∏üá¨',
      region: 'asia',
      time: '5-7 –¥–Ω–µ–π',
      price: 3000,
      priceText: '$3,000',
      features: ['–ê–∑–∏–∞—Ç—Å–∫–∏–π —Ö–∞–±', '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', '–ë–∞–Ω–∫–∏']
    },
    { 
      id: 'hongkong',
      name: '–ì–æ–Ω–∫–æ–Ω–≥',
      flag: 'üá≠üá∞',
      region: 'asia',
      time: '7-14 –¥–Ω–µ–π',
      price: 3500,
      priceText: '$3,500',
      features: ['–î–æ—Å—Ç—É–ø –∫ –ö–∏—Ç–∞—é', '–ù–∏–∑–∫–∏–µ –Ω–∞–ª–æ–≥–∏', '–ü—Ä–µ—Å—Ç–∏–∂']
    },
    { 
      id: 'uae',
      name: '–û–ê–≠',
      flag: 'üá¶üá™',
      region: 'asia',
      time: '7-10 –¥–Ω–µ–π',
      price: 4000,
      priceText: '$4,000',
      features: ['0% –Ω–∞–ª–æ–≥–æ–≤', '–†–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∞—è –≤–∏–∑–∞', '–ë–∞–Ω–∫–∏']
    }
  ];

  // English translations
  const enT = {
    cyprus: { name: 'Cyprus', time: '7-10 days', features: ['EU company', 'Low taxes', 'Prestige'] },
    uk: { name: 'United Kingdom', time: '3-5 days', features: ['Fast registration', 'World prestige', 'Banks'] },
    estonia: { name: 'Estonia', time: '1-3 days', features: ['E-Residency', 'Online management', 'EU company'] },
    singapore: { name: 'Singapore', time: '5-7 days', features: ['Asian hub', 'Stability', 'Banks'] },
    hongkong: { name: 'Hong Kong', time: '7-14 days', features: ['Access to China', 'Low taxes', 'Prestige'] },
    uae: { name: 'UAE', time: '7-10 days', features: ['0% taxes', 'Residency visa', 'Banks'] }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  let countries = [];
  
  function loadCountriesData() {
    try {
      if (isEnglish) {
        // –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        countries = defaultCountries;
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–µ—Ä—Å–∏–π –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
        const storedData = localStorage.getItem('registrationCountries');
        
        if (storedData) {
          const parsed = JSON.parse(storedData);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
          if (Array.isArray(parsed) && parsed.length > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const isValid = parsed[0].name && 
                          (parsed[0].flag || parsed[0].flag === '') && 
                          (parsed[0].region || parsed[0].region === '');
            
            if (isValid) {
              countries = parsed;
              console.log('Loaded', countries.length, 'countries from localStorage');
            } else {
              console.warn('Invalid data structure in localStorage, using defaults');
              countries = defaultCountries;
            }
          } else {
            console.warn('Empty or invalid data in localStorage, using defaults');
            countries = defaultCountries;
          }
        } else {
          // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ localStorage - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
          countries = defaultCountries;
        }
      }
    } catch (e) {
      console.error('Error loading countries:', e);
      countries = defaultCountries;
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  loadCountriesData();
  
  // DOM elements
  const countriesGrid = document.getElementById('countries-grid');
  const searchInput = document.getElementById('country-search');
  const regionFilter = document.getElementById('region-filter');
  const resetBtn = document.getElementById('reset-filters');

  // Render countries
  function renderCountries(data = countries) {
    if (!countriesGrid) {
      console.error('Countries grid not found');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (!data || !Array.isArray(data) || data.length === 0) {
      countriesGrid.innerHTML = '<p style="text-align: center; color: #666; padding: 40px;">–ù–µ—Ç —Å—Ç—Ä–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—Ä–∞–Ω—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.</p>';
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
    const validCountries = data.filter(country => country && country.name);
    
    if (validCountries.length === 0) {
      countriesGrid.innerHTML = '<p style="text-align: center; color: #666; padding: 40px;">–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>';
      return;
    }
    
    countriesGrid.innerHTML = validCountries.map((country, index) => {
      const display = isEnglish && enT[country.id] ? { ...country, ...enT[country.id] } : country;
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const countryId = country.id || `country-${index}`;
      const flag = country.flag || 'üè≥Ô∏è';
      const name = display.name || 'Unnamed';
      const time = display.time || 'N/A';
      const priceText = display.priceText || country.priceText || (country.price ? `$${country.price}` : 'Contact us');
      const features = display.features || country.features || [];
      
      return `
      <div class="country-card" data-country-id="${countryId}" style="animation-delay: ${index * 0.1}s">
        <div class="country-flag">${flag}</div>
        <h3 class="country-name">${name}</h3>
        
        <div class="country-info">
          <div class="country-info-item">
            <span class="country-info-label">${isEnglish ? 'Registration time:' : '–°—Ä–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:'}</span>
            <span class="country-info-value">${time}</span>
          </div>
          ${features.length > 0 ? `
            <div class="country-info-item">
              <span class="country-info-label">${isEnglish ? 'Advantages:' : '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:'}</span>
            </div>
            <ul style="margin: 8px 0 0 0; padding-left: 20px; color: rgba(255,255,255,0.8); font-size: 14px;">
              ${features.map(f => `<li>${f}</li>`).join('')}
            </ul>
          ` : ''}
        </div>
        
        <div class="country-price">${isEnglish ? 'from ' : '–æ—Ç '} ${priceText}</div>
        
        <button class="country-cta" onclick="openRegistrationModal('${countryId}')">
          ${isEnglish ? 'Order registration' : '–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'}
        </button>
      </div>
    `}).join('');
  }

  // Filter countries
  function filterCountries() {
    let filtered = [...countries];
    
    // Search filter
    const searchTerm = searchInput?.value.toLowerCase() || '';
    if (searchTerm) {
      filtered = filtered.filter(c => 
        c.name && c.name.toLowerCase().includes(searchTerm)
      );
    }
    
    // Region filter
    const region = regionFilter?.value || '';
    if (region) {
      filtered = filtered.filter(c => c.region === region);
    }
    
    renderCountries(filtered);
  }

  // Event listeners
  searchInput?.addEventListener('input', filterCountries);
  regionFilter?.addEventListener('change', filterCountries);
  
  resetBtn?.addEventListener('click', () => {
    if (searchInput) searchInput.value = '';
    if (regionFilter) regionFilter.value = '';
    renderCountries();
  });

  // Initial render
  renderCountries();
  
  // Modal functionality
  const modal = document.getElementById('registration-modal');
  const modalClose = document.getElementById('modal-close');
  const modalFlag = document.getElementById('modal-flag');
  const modalTitle = document.getElementById('modal-title');
  const modalSubtitle = document.getElementById('modal-subtitle');
  const countryInput = document.getElementById('country-input');
  const formSubject = document.getElementById('form-subject');
  const registrationForm = document.getElementById('registration-form');
  const formSuccess = document.getElementById('form-success');

  // Open modal function
  window.openRegistrationModal = (countryId) => {
    const country = countries.find(c => (c.id || `country-${countries.indexOf(c)}`) === countryId);
    if (!country) {
      console.error('Country not found:', countryId);
      return;
    }

    if (!modal) {
      console.error('Modal not found!');
      return;
    }

    modalFlag.textContent = country.flag || 'üè≥Ô∏è';
    const displayName = isEnglish && enT[country.id]?.name ? enT[country.id].name : country.name;
    
    if (isEnglish) {
      modalTitle.textContent = `Company registration in ${displayName}`;
      modalSubtitle.textContent = `Fill the form to get a consultation on registering in ${displayName}`;
      formSubject.value = `Company registration request in ${displayName}`;
    } else {
      modalTitle.textContent = `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –≤ ${displayName}`;
      modalSubtitle.textContent = `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ ${displayName}`;
      formSubject.value = `–ó–∞–∫–∞–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ ${displayName}`;
    }
    
    countryInput.value = displayName;
    modal.classList.add('active');
  };

  // Close modal
  modalClose?.addEventListener('click', () => modal.classList.remove('active'));
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) modal.classList.remove('active');
  });

  // Form submission
  registrationForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(registrationForm);
    const data = {
      service: 'registration',
      country: formData.get('country'),
      name: formData.get('name'),
      email: formData.get('email'),
      phone: formData.get('phone'),
      message: formData.get('message')
    };

    try {
      await sendToTelegram(data);
      
      registrationForm.style.display = 'none';
      formSuccess.style.display = 'block';
      formSuccess.innerHTML = isEnglish ? 
        '<p>‚úÖ Thank you! We will contact you within 15 minutes.</p>' :
        '<p>‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</p>';
      
      setTimeout(() => {
        modal.classList.remove('active');
        registrationForm.style.display = 'block';
        formSuccess.style.display = 'none';
        registrationForm.reset();
      }, 3000);
    } catch (error) {
      console.error('Error:', error);
      alert(isEnglish ? 'Error sending form. Please try again.' : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  });

  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
  console.log('Registration page loaded. Countries:', countries.length);
})();
